/*
 *  ion.c
 *
 * Memory Allocator functions for ion
 *
 *   Copyright 2011 Google, Inc
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
#define LOG_TAG "ion"

//#include <cutils/log.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/types.h>

#include <pthread.h>

#include "ionapi.h"
#include "list.h"

#define ROUNDUP(num, align)	((num + (align) - 1) & ~((align) - 1))

static LIST_HEAD(gIonFdList);
typedef struct {
    struct list_head list;
    long pid;
    int fd;
    unsigned int count;
} stIonFdInfo;

typedef struct mentry
{
    int type; //0:video 1:audio
    ion_user_handle_t handle;
    int fd;
    unsigned int request_size;
    unsigned int alloc_size;
    unsigned long phys_addr;
    unsigned long virt_addr;
    unsigned int heap_type;
    struct mentry *next;
} mentry_t;
static int ment_count = 0;

static mentry_t *ment_head = NULL;
static pthread_mutex_t ment_mtx = PTHREAD_MUTEX_INITIALIZER;

int ionfd = -1;
pthread_mutex_t gIonFdMutex = PTHREAD_MUTEX_INITIALIZER;

static void mentry_add(mentry_t *ent)
{
    pthread_mutex_lock(&ment_mtx);
    ent->next = ment_head;
    ment_head = ent;
    ment_count++;
    pthread_mutex_unlock(&ment_mtx);
}

static mentry_t *mentry_remove_by_phys(unsigned long phys_addr)
{
    mentry_t *prev = NULL;
    mentry_t *curr = NULL;

    pthread_mutex_lock(&ment_mtx);
    curr = ment_head;
    while(curr != NULL) {
        if(curr->phys_addr != phys_addr) {
            //printf("%s: curr->phys_addr:%x != phys_addr:%x\n", __func__, curr->phys_addr, phys_addr);
            prev = curr;
            curr = curr->next;
            continue;
        }
        //found, remove it
        if(prev == NULL) { //curr is the first entry
            ment_head = curr->next;
            //printf("%s: set next to head phys_addr:%x\n", __func__, ment_head->phys_addr);
        } else {
            prev->next = curr->next;
            //printf("%s: prev->phys_addr:%x -> next->phys_addr:%x\n", __func__, prev->phys_addr, prev->next->phys_addr);
        }
        ment_count--;
        pthread_mutex_unlock(&ment_mtx);
        return curr;
    }
    pthread_mutex_unlock(&ment_mtx);
    return NULL;
}

static mentry_t *mentry_remove_by_virt(unsigned long virt_addr)
{
    mentry_t *prev = NULL;
    mentry_t *curr = NULL;

    pthread_mutex_lock(&ment_mtx);
    curr = ment_head;
    while(curr != NULL) {
        if(curr->virt_addr != virt_addr) {
            //printf("%s: curr->phys_addr:%x != phys_addr:%x\n", __func__, curr->phys_addr, phys_addr);
            prev = curr;
            curr = curr->next;
            continue;
        }
        //found, remove it
        if(prev == NULL) { //curr is the first entry
            ment_head = curr->next;
            //printf("%s: set next to head phys_addr:%x\n", __func__, ment_head->phys_addr);
        } else {
            prev->next = curr->next;
            //printf("%s: prev->phys_addr:%x -> next->phys_addr:%x\n", __func__, prev->phys_addr, prev->next->phys_addr);
        }
        ment_count--;
        pthread_mutex_unlock(&ment_mtx);
        return curr;
    }
    pthread_mutex_unlock(&ment_mtx);
    return NULL;
}

static void mentry_list(void)
{
    mentry_t *curr = ment_head;
    printf("============================== ion media buffer list (%d) ===================================\n", ment_count);
    while(curr != NULL) {
        printf("%s: heap:%s type:%s handle:%08x phys:%08lx request:%x alloc:%x\n", __func__, (curr->heap_type == RTK_SATURN_ION_HEAP_MEDIA_MASK) ? "media" : "contig", (curr->type & 0x1) ? "audio" : "video", curr->handle, curr->phys_addr, curr->request_size, curr->alloc_size);
        curr = curr->next;
    }
}


int ion_open()
{
    int fd = open("/dev/ion", O_RDWR);
    if (fd < 0)
        printf("open /dev/ion failed!\n");
    //printf("%s success fd:%d\n", __func__, fd);
    return fd;
}

int ion_close(int fd)
{
    return close(fd);
}

static int ion_ioctl(int fd, int req, void *arg)
{
    int ret = ioctl(fd, req, arg);
    if (ret < 0) {
        printf("ioctl %x failed with code %d: %s\n", req, ret, strerror(errno));
        return -errno;
    }
    return ret;
}

int ion_alloc(int fd, size_t len, size_t align, unsigned int heap_mask,
              unsigned int flags, ion_user_handle_t *handle)
{
    int ret;
    struct ion_allocation_data data = {
        .len = len,
        .align = align,
        .heap_id_mask = heap_mask,
        .flags = flags,
//        .handle = NULL,
    };

    //printf("%s: len:%u align:%x heap_mask:0x%x flags:0x%x handle=0x%.8x\n", __func__, len, align, heap_mask, flags, handle);
    ret = ion_ioctl(fd, ION_IOC_ALLOC, &data);
    if (ret < 0) {
        perror("ION_IOC_ALLOC failed");
        return ret;
    }
    *handle = data.handle;
    //printf("%s: handle:%p\n", __func__, *handle);
    return ret;
}

int ion_alloc_tiler(int fd, size_t w, size_t h, int fmt, unsigned int size, unsigned int flags,
                    ion_user_handle_t *handle, size_t *stride)
{
    int ret;
    struct rtk_saturn_ion_tiler_alloc_data alloc_data = {
        .w = w,
        .h = h,
        .fmt = fmt,
        .flags = flags,
        .size = size,
    };

    struct ion_custom_data custom_data = {
        .cmd = RTK_SATURN_ION_TILER_ALLOC,
        .arg = (unsigned long)(&alloc_data),
    };

    ret = ion_ioctl(fd, ION_IOC_CUSTOM, &custom_data);
    if (ret < 0)
        return ret;
    *stride = alloc_data.stride;
    *handle = alloc_data.handle;
    return ret;
}

int ion_free(int fd, ion_user_handle_t handle)
{
    struct ion_handle_data data = {
        .handle = handle,
    };
    return ion_ioctl(fd, ION_IOC_FREE, &data);
}

int ion_map(int fd, ion_user_handle_t handle, size_t length, int prot,
            int flags, off_t offset, unsigned char **ptr, int *map_fd)
{
    struct ion_fd_data data = {
        .handle = handle,
    };

    int ret = ion_ioctl(fd, ION_IOC_MAP, &data);
    if (ret < 0)
        return ret;
    *map_fd = data.fd;
    if (*map_fd < 0) {
        printf("map ioctl returned negative fd\n");
        return -EINVAL;
    }
    //printf("%s: length:%x prot:%x flags:%x offset:%llx\n", __func__, length, prot, flags, offset);
    *ptr = mmap(NULL, length, prot, flags, *map_fd, offset);
    if (*ptr == MAP_FAILED) {
        printf("mmap failed: %s\n", strerror(errno));
        return -errno;
    }
    //printf("%s: len:%x ofs:%llx ptr:%p\n", __func__, length, offset, *ptr);
    return ret;
}

int ion_share(int fd, ion_user_handle_t handle, int *share_fd)
{
    struct ion_fd_data data = {
        .handle = handle,
    };

    int ret = ion_ioctl(fd, ION_IOC_SHARE, &data);
    if (ret < 0)
        return ret;
    *share_fd = data.fd;
    if (*share_fd < 0) {
        printf("share ioctl returned negative fd\n");
        return -EINVAL;
    }
    return ret;
}

int ion_alloc_fd(int fd, size_t len, size_t align, unsigned int heap_mask,
                 unsigned int flags, int *handle_fd) {
    ion_user_handle_t handle;
    int ret;
//    printf("%s:%d ==> heap_mask=0x%x, RTK_SATURN_ION_HEAP_TILER_MASK=0x%x\n", __func__, __LINE__, heap_mask, RTK_SATURN_ION_HEAP_TILER_MASK);
    if (heap_mask == RTK_SATURN_ION_HEAP_TILER_MASK)
    {
        int stride;
        int new_align_len = ROUNDUP(len, align);
        ret = ion_alloc_tiler(fd, 1920, 1080, TILER_PIXEL_FMT_32BIT, new_align_len, flags, &handle_fd, &stride);
    }
    else
    {
        ret = ion_alloc(fd, len, align, heap_mask, flags, &handle);
    }
    if (ret < 0)
        return ret;
    ret = ion_share(fd, handle, handle_fd);
    ion_free(fd, handle);
    return ret;
}

int ion_import(int fd, int share_fd, ion_user_handle_t *handle)
{
    struct ion_fd_data data = {
        .fd = share_fd,
    };

    int ret = ion_ioctl(fd, ION_IOC_IMPORT, &data);
    if (ret < 0)
        return ret;
    *handle = data.handle;
    return ret;
}

int ion_sync_fd(int fd, int handle_fd)
{
    struct ion_fd_data data = {
        .fd = handle_fd,
    };
    return ion_ioctl(fd, ION_IOC_SYNC, &data);
}

#if 1 //20130208 charleslin
int ion_phys(int fd, ion_user_handle_t handle, unsigned long *addr, unsigned int *size)
{
    int ret;
    struct ion_phys_data data = {
        .handle = handle,
        .addr = 0,
        .len = 0,
    };
    //printf("%s:%d ==> fd=%d\n", __func__, __LINE__, fd);
    ret = ion_ioctl(fd, ION_IOC_PHYS, &data);
    if (ret < 0) {
        perror("ION_IOC_PHYS failed");
        return ret;
    }
    *addr = data.addr;
    *size = data.len;
    //printf("%s handle:%p addr:%lx size:%x\n", __func__, handle, data.addr, data.len);
    return ret;
}
#endif

void *ionapi_alloc(unsigned int size, unsigned int align, unsigned int type, void **noncacheable, unsigned long *phys_addr, ion_user_handle_t *ionhdl)
{
    int ret;
    int mapfd;
    unsigned int alloc_size = ROUNDUP(size, getpagesize());
#if defined(LINUX_NPTL)
    long pid = gettid();
#else
    long pid = getpid();
#endif
    stIonFdInfo *ionInfo;
    int ion_fd = -1;
    mentry_t *ent = 0;
    //printf("[====== %s ======] [size:%d align:%d type:%d]\n", __func__, size, align, type);
//workaround for 1195
#if defined(USE_ION_V2)
    if (align > 4096)
    {
//        printf("[====== %s ======] align:%d > 4096 , reset align = 4096\n", __func__, align);
        align = 4096;
    }
#endif

    if (type != ION_HEAP_SYSTEM_CONTIG_MASK)
    {
        alloc_size = ROUNDUP(alloc_size, align);
    }
//    printf("[%s:%d], enter, pid = %d\n", __FUNCTION__, __LINE__, pid);
    pthread_mutex_lock(&gIonFdMutex);
    list_for_each_entry(ionInfo, &gIonFdList, list) {
        if (ionInfo->pid == pid) {
            ion_fd = ionInfo->fd;
//            printf("[%s:%d], found fd = %d\n", __FUNCTION__, __LINE__, ion_fd);
            break;
        }
    }

    if (ion_fd < 0) {
        ionInfo = malloc(sizeof(*ionInfo));
        if (!ionInfo) {
            printf("[%s:%d], malloc failed\n", __FUNCTION__, __LINE__);
            pthread_mutex_unlock(&gIonFdMutex);
            return NULL;
        }
        memset(ionInfo, 0, sizeof(*ionInfo));
        ion_fd = ionInfo->fd = ion_open();
        if (ionInfo->fd < 0) {
            printf("[%s:%d], ion_open failed\n", __FUNCTION__, __LINE__);
            free(ionInfo);
            pthread_mutex_unlock(&gIonFdMutex);
            return NULL;
        }
        ionInfo->pid = pid;
//        printf("[%s:%d], open fd = %d, pid = %d\n", __FUNCTION__, __LINE__, ion_fd, pid);
        list_add(&ionInfo->list, &gIonFdList);
    }

    pthread_mutex_unlock(&gIonFdMutex);

    ent = calloc(1, sizeof(mentry_t));

    ent->heap_type = type;//ION_HEAP_SYSTEM_CONTIG_MASK;
    ent->request_size = size;
    ent->alloc_size = alloc_size;
    ent->fd = ion_fd;

    if (type == RTK_SATURN_ION_HEAP_TILER_MASK)
    {
        int stride;
        alloc_size = ROUNDUP(size, align);
        ret = ion_alloc_tiler(ion_fd, 1920, 1080, TILER_PIXEL_FMT_32BIT, alloc_size, 0, &ent->handle, &stride);
    }
    else
    {
        ret = ion_alloc(ion_fd, alloc_size, align, type, type, &ent->handle);
    }
    if (ret < 0) {
        printf("[%s:%d], ion_alloc fail\n", __FUNCTION__, __LINE__);
        return NULL;
    }
    ret = ion_phys(ion_fd, ent->handle, &ent->phys_addr, &ent->alloc_size);
    if (ret < 0) {
        printf("[%s:%d], ion_phys fail size=%d, align=%d ent->alloc_size=%d\n", __FUNCTION__, __LINE__, size, align, ent->alloc_size);
        return NULL;
    }
    //printf("[%s:%d], open fd = %d, pid = %d phys_addr=%lx\n", __FUNCTION__, __LINE__, ion_fd, pid, ent->phys_addr);
    ret = ion_map(ion_fd, ent->handle, alloc_size, PROT_READ | PROT_WRITE, MAP_SHARED, 0, (unsigned char **)noncacheable, &mapfd);
    if (ret < 0) {
        printf("[%s:%d], ion_map fail\n", __FUNCTION__, __LINE__);
        fflush(stdout);
        return NULL;
    }
    close(mapfd); //we don't need to share with other process, close it

    ionInfo->count++;
    ent->virt_addr = *noncacheable;
    //printf("[====== %s ======] [addr:0x%.8x size:%d align:%d type:%d]\n", __func__, ent->virt_addr, size, align, type);

    *phys_addr = ent->phys_addr;
    mentry_add(ent);
    if (ionhdl != NULL)
    {
        *ionhdl = ent->handle;
    }
    //printf("%s: size:%x(%x) align:%x type:%x phys:%lx virt:%p hdl:%p\n", __func__, size, alloc_size, align, type, *phys_addr, *noncacheable, *ionhdl);
//    printf("[IONDBG] alloc fd=%d hdl=0x%.8x pid=%d getpid=%d paddr:0x%.8x vaddr:0x%.8x\n", ion_fd, ent->handle, ionInfo->pid, getpid(), ent->phys_addr, ent->virt_addr);
    //printf("[IONDBG] alloc fd=%d hdl=0x%.8x pid=%d gettid=%d paddr:0x%.8x vaddr:0x%.8x\n", ion_fd, ent->handle, ionInfo->pid, gettid(), ent->phys_addr, ent->virt_addr);
    if(*phys_addr & (align - 1)) {
            printf("%s: allocate buffer:%lx is not aligned to %x !!\n", __func__, *phys_addr, align);
#if defined(USE_ION_V2)
            //don't force exit
#else
            exit(1);
#endif
    }
    //printf("[%s:%d], exit 0x%08x, %d\n", __FUNCTION__, __LINE__, *noncacheable, size);
    return (void *)*noncacheable;
}

void ionapi_free(void *addr, unsigned int size, ion_user_handle_t ionhdl)
{
    int ret;
//    long pid = getpid();
    stIonFdInfo *ionInfo = NULL;
    int ion_fd = -1;
    int need_close_fd = 0;
//    printf("[====== %s ======] [addr:0x%.8x size:%d]\n", __func__, addr, size);
//    printf("[%s:%d], enter 0x%08x (%d), pid = %d\n", __FUNCTION__, __LINE__, addr, size, pid);

    mentry_t *ent = mentry_remove_by_virt(addr);
    if (ent == NULL)
    {
#if defined(LINUX_NPTL)
        printf("[IONDBG] free ent is NULL pid=%d gettid()=%d addr:0x%.8x\n", ionInfo->pid, gettid(), addr);
#else
        printf("[IONDBG] free ent is NULL pid=%d getpid()=%d addr:0x%.8x\n", ionInfo->pid, getpid(), addr);
#endif
    }
    else
    {
//        printf("[IONDBG] free allocsize=%d fd=%d hdl=0x%.8x ionhdl=0x%.8x pid=%d getpid()=%d paddr:0x%.8x vaddr:0x%.8x\n", ent->alloc_size, ion_fd, ent->handle, ionhdl, ionInfo->pid, getpid(), ent->phys_addr, ent->virt_addr);
#if 1
        ret = munmap(ent->virt_addr, ent->alloc_size);
        if (ret < 0) {
            printf("[%s:%d], munmap failed (%s)\n", __FUNCTION__, __LINE__, strerror(errno));
            return ;
        }
#endif
//        printf("[IONDBG] af munmap\n");

        pthread_mutex_lock(&gIonFdMutex);
        list_for_each_entry(ionInfo, &gIonFdList, list) {
            if (ionInfo->fd == ent->fd) {
                ionInfo->count--;
//printf("[==== got ent->fd=%d vaddr=0x%.8x alloc_size=%d new ionInfo->count=%d ====]\n", ent->fd, ent->virt_addr, ent->alloc_size, ionInfo->count);
                if (ionInfo->count == 0)
                {
                    list_del(&ionInfo->list);
                    need_close_fd = 1;
                }
                break;
            }
        }
        pthread_mutex_unlock(&gIonFdMutex);

        ion_free(ent->fd, ent->handle);
        if (need_close_fd == 1)
        {
            ion_close(ent->fd);
        }
        free(ent);
    }
}


void ionapi_list(void)
{
    mentry_list();
}

int ionapi_get_sharefd_by_virt(unsigned long virt_addr)
{
    mentry_t *prev = NULL;
    mentry_t *curr = NULL;

    pthread_mutex_lock(&ment_mtx);
    curr = ment_head;
    while(curr != NULL) {
        if(curr->virt_addr != virt_addr) {
            //printf("%s: curr->phys_addr:%x != phys_addr:%x\n", __func__, curr->phys_addr, phys_addr);
            prev = curr;
            curr = curr->next;
            continue;
        }
        //found!!
        pthread_mutex_unlock(&ment_mtx);
        int new_sharefd = 0;
        ion_share(curr->fd, curr->handle, &new_sharefd);
            
        return new_sharefd;
    }
    pthread_mutex_unlock(&ment_mtx);
    return 0;
}

